//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scenes/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMouvement"",
            ""id"": ""c65a77c5-c2e2-464b-8171-34e8df8ee6fc"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""724fa12b-9f72-43a0-a668-cd70e66ec9d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d4285834-b353-43fa-81d1-6a850e64ce39"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84945a8b-df3c-4976-8646-3ac3e09cbc10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ed7837d5-16f9-4788-964b-65aead71550b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8588a230-2649-4bfe-92ed-61e4e951eb82"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""66482586-b8e7-4874-89be-cb289c24affd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MouseActions"",
            ""id"": ""57defe5a-cd60-4dfc-bc0e-d3bae3805713"",
            ""actions"": [
                {
                    ""name"": ""MouseKeys"",
                    ""type"": ""Value"",
                    ""id"": ""2bc0befd-9b8b-4d6c-ab2f-f3b1956270e1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""141f2efa-90b7-461e-9577-e662df774f9a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1342cea8-fa86-4710-882c-cd6bec7b5627"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74788eeb-f97d-4fe9-9875-8f860b5b37e5"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1d2eaee-fba4-47b0-952a-48b3e518c5c0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseKeys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OtherActions"",
            ""id"": ""f24fd615-1230-4f06-b021-f00ce678e9a1"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""262b0760-231d-4719-917f-ea963e303528"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69ec5bf9-fbd5-4c75-8983-469627f3566c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68278f86-10f6-4d0c-b45f-61aa40ffad6f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d94a9f96-f867-470c-8925-6cfa0bc6dca3"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb87a99f-8b67-4046-8390-6f9442e79baa"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe160f9e-e01b-4444-b1e0-51fb891ab1d8"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18752465-15c5-45b1-9329-c811c22e3116"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b16162-293b-4ea3-b4f5-e204dfd79039"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMouvement
        m_PlayerMouvement = asset.FindActionMap("PlayerMouvement", throwIfNotFound: true);
        m_PlayerMouvement_Mouvement = m_PlayerMouvement.FindAction("Mouvement", throwIfNotFound: true);
        // MouseActions
        m_MouseActions = asset.FindActionMap("MouseActions", throwIfNotFound: true);
        m_MouseActions_MouseKeys = m_MouseActions.FindAction("MouseKeys", throwIfNotFound: true);
        // OtherActions
        m_OtherActions = asset.FindActionMap("OtherActions", throwIfNotFound: true);
        m_OtherActions_Newaction = m_OtherActions.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMouvement
    private readonly InputActionMap m_PlayerMouvement;
    private IPlayerMouvementActions m_PlayerMouvementActionsCallbackInterface;
    private readonly InputAction m_PlayerMouvement_Mouvement;
    public struct PlayerMouvementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMouvementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_PlayerMouvement_Mouvement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMouvement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMouvementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMouvementActions instance)
        {
            if (m_Wrapper.m_PlayerMouvementActionsCallbackInterface != null)
            {
                @Mouvement.started -= m_Wrapper.m_PlayerMouvementActionsCallbackInterface.OnMouvement;
                @Mouvement.performed -= m_Wrapper.m_PlayerMouvementActionsCallbackInterface.OnMouvement;
                @Mouvement.canceled -= m_Wrapper.m_PlayerMouvementActionsCallbackInterface.OnMouvement;
            }
            m_Wrapper.m_PlayerMouvementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mouvement.started += instance.OnMouvement;
                @Mouvement.performed += instance.OnMouvement;
                @Mouvement.canceled += instance.OnMouvement;
            }
        }
    }
    public PlayerMouvementActions @PlayerMouvement => new PlayerMouvementActions(this);

    // MouseActions
    private readonly InputActionMap m_MouseActions;
    private IMouseActionsActions m_MouseActionsActionsCallbackInterface;
    private readonly InputAction m_MouseActions_MouseKeys;
    public struct MouseActionsActions
    {
        private @PlayerControls m_Wrapper;
        public MouseActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseKeys => m_Wrapper.m_MouseActions_MouseKeys;
        public InputActionMap Get() { return m_Wrapper.m_MouseActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActionsActions instance)
        {
            if (m_Wrapper.m_MouseActionsActionsCallbackInterface != null)
            {
                @MouseKeys.started -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnMouseKeys;
                @MouseKeys.performed -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnMouseKeys;
                @MouseKeys.canceled -= m_Wrapper.m_MouseActionsActionsCallbackInterface.OnMouseKeys;
            }
            m_Wrapper.m_MouseActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseKeys.started += instance.OnMouseKeys;
                @MouseKeys.performed += instance.OnMouseKeys;
                @MouseKeys.canceled += instance.OnMouseKeys;
            }
        }
    }
    public MouseActionsActions @MouseActions => new MouseActionsActions(this);

    // OtherActions
    private readonly InputActionMap m_OtherActions;
    private IOtherActionsActions m_OtherActionsActionsCallbackInterface;
    private readonly InputAction m_OtherActions_Newaction;
    public struct OtherActionsActions
    {
        private @PlayerControls m_Wrapper;
        public OtherActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_OtherActions_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_OtherActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherActionsActions set) { return set.Get(); }
        public void SetCallbacks(IOtherActionsActions instance)
        {
            if (m_Wrapper.m_OtherActionsActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_OtherActionsActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_OtherActionsActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_OtherActionsActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_OtherActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public OtherActionsActions @OtherActions => new OtherActionsActions(this);
    public interface IPlayerMouvementActions
    {
        void OnMouvement(InputAction.CallbackContext context);
    }
    public interface IMouseActionsActions
    {
        void OnMouseKeys(InputAction.CallbackContext context);
    }
    public interface IOtherActionsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
